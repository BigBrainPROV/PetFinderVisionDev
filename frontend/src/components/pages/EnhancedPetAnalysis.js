import React, { useState } from 'react';
import { Container, Row, Col, Card, Badge, ProgressBar, Alert, Modal, Button } from 'react-bootstrap';
import { FaCloudUploadAlt, FaBrain, FaChartLine, FaEye, FaPaw, FaHeart, FaSearch, FaPhone } from 'react-icons/fa';
import NavbarComp from './NavbarComp';
import api from '../../api/config';
import 'bootstrap/dist/css/bootstrap.min.css';
import '../../styles/common.css';
import '../../styles/EnhancedPetAnalysis.css';

const EnhancedPetAnalysis = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [analysisResults, setAnalysisResults] = useState(null);
  const [similarPets, setSimilarPets] = useState([]);
  const [selectedPetDetails, setSelectedPetDetails] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);

  const translations = {
    // –¢–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
    'cat': '–ö–æ—à–∫–∞',
    'dog': '–°–æ–±–∞–∫–∞',
    'bird': '–ü—Ç–∏—Ü–∞',
    'rodent': '–ì—Ä—ã–∑—É–Ω',
    'rabbit': '–ö—Ä–æ–ª–∏–∫',
    'reptile': '–†–µ–ø—Ç–∏–ª–∏—è',
    'other': '–î—Ä—É–≥–æ–µ',
    'mixed': '–°–º–µ—à–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞',
    'domestic': '–î–æ–º–∞—à–Ω—è—è',
    'parrot': '–ü–æ–ø—É–≥–∞–π',
    'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',

    // –¶–≤–µ—Ç–∞
    'black': '–ß–µ—Ä–Ω—ã–π',
    'white': '–ë–µ–ª—ã–π',
    'gray': '–°–µ—Ä—ã–π',
    'light_gray': '–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π',
    'dark_gray': '–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π',
    'brown': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
    'red': '–†—ã–∂–∏–π',
    'dark_red': '–¢–µ–º–Ω–æ-—Ä—ã–∂–∏–π',
    'orange': '–û—Ä–∞–Ω–∂–µ–≤—ã–π',
    'yellow': '–ñ–µ–ª—Ç—ã–π',
    'golden': '–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π',
    'green': '–ó–µ–ª–µ–Ω—ã–π',
    'dark_green': '–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π',
    'blue': '–ì–æ–ª—É–±–æ–π',
    'dark_blue': '–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π',
    'purple': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    'dark_purple': '–¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    'cyan': '–ë–∏—Ä—é–∑–æ–≤—ã–π',
    'teal': '–°–∏–Ω–µ-–∑–µ–ª–µ–Ω—ã–π',
    'magenta': '–ü—É—Ä–ø—É—Ä–Ω—ã–π',
    'multicolor': '–ú–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω—ã–π',
    'spotted': '–ü—è—Ç–Ω–∏—Å—Ç—ã–π',
    'striped': '–ü–æ–ª–æ—Å–∞—Ç—ã–π',
    'tuxedo': '–°–º–æ–∫–∏–Ω–≥',
    'solid': '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π',
    'bicolor': '–î–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π',

    // –¶–≤–µ—Ç–∞ –≥–ª–∞–∑
    'amber': '–Ø–Ω—Ç–∞—Ä–Ω—ã–µ',
    'hazel': '–û—Ä–µ—Ö–æ–≤—ã–µ',
    'different': '–†–∞–∑–Ω—ã–µ (–≥–µ—Ç–µ—Ä–æ—Ö—Ä–æ–º–∏—è)',
    'turquoise': '–ë–∏—Ä—é–∑–æ–≤—ã–µ',
    'dark_brown': '–¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ',

    // –§–æ—Ä–º—ã –º–æ—Ä–¥–æ—á–∫–∏
    'round': '–ö—Ä—É–≥–ª–∞—è',
    'oval': '–û–≤–∞–ª—å–Ω–∞—è',
    'triangular': '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è',
    'long': '–í—ã—Ç—è–Ω—É—Ç–∞—è',
    'flat': '–ü–ª–æ—Å–∫–∞—è',
    'square': '–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è',

    // –û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã
    'heterochromia': '–ì–µ—Ç–µ—Ä–æ—Ö—Ä–æ–º–∏—è (—Ä–∞–∑–Ω—ã–µ –≥–ª–∞–∑–∞)',
    'ear_fold': '–ó–∞–ª–æ–º –Ω–∞ —É—Ö–µ',
    'eye_spot': '–ü—è—Ç–Ω–æ –Ω–∞ –≥–ª–∞–∑—É',
    'tail_missing': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–≤–æ—Å—Ç',
    'limb_missing': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∞–ø–∫–∞',
    'albino': '–ê–ª—å–±–∏–Ω–∏–∑–º',
    'vitiligo': '–í–∏—Ç–∏–ª–∏–≥–æ',
    'spotted_pattern': '–ü—è—Ç–Ω–∏—Å—Ç—ã–π —É–∑–æ—Ä',
    'striped_pattern': '–ü–æ–ª–æ—Å–∞—Ç—ã–π —É–∑–æ—Ä',
    'fluffy_coat': '–ü—É—à–∏—Å—Ç–∞—è —à–µ—Ä—Å—Ç—å',
    'curly_coat': '–ö—É–¥—Ä—è–≤–∞—è —à–µ—Ä—Å—Ç—å',
    'multiple': '–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
    'none': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',

    // –†–∞–∑–º–µ—Ä—ã
    'tiny': '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π',
    'small': '–ú–∞–ª–µ–Ω—å–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'large': '–ë–æ–ª—å—à–æ–π',
    'extra_large': '–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π'
  };

  const formatLabel = (label) => {
    if (!label) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    return translations[label] || label;
  };

  const formatConfidence = (confidence) => {
    return `${Math.round((confidence || 0) * 100)}%`;
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return 'success';
    if (confidence >= 0.6) return 'warning';
    return 'danger';
  };

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }
      setSelectedFile(file);
      setPreview(URL.createObjectURL(file));
      setError('');
      setAnalysisResults(null);
      setSimilarPets([]);
    }
  };

  const handleAnalyze = async () => {
    if (!selectedFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (selectedFile.size > maxSize) {
      setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
      return;
    }

    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
    if (!allowedTypes.includes(selectedFile.type)) {
      setError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPEG, PNG, GIF');
      return;
    }

    setLoading(true);
    setError('');
    setAnalysisResults(null);
    setSimilarPets([]);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML —Å–µ—Ä–≤–∏—Å–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML —Å–µ—Ä–≤–∏—Å–∞...');
      const healthResponse = await fetch('http://localhost:5004/', {
        method: 'GET',
        timeout: 5000
      });
      
      if (!healthResponse.ok) {
        throw new Error('ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      console.log('‚úÖ ML —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append('file', selectedFile); // –í–∞–∂–Ω–æ: –∏–º—è –ø–æ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'file'

      const response = await fetch('http://localhost:5004/search/', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);
      console.log('üîç –ü–æ—Ö–æ–∂–∏–µ –ø–∏—Ç–æ–º—Ü—ã:', data.similar_lost_pets);
      
      setAnalysisResults(data.analysis);
      setSimilarPets(data.similar_lost_pets || []);
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
      setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const renderUniqueMetrics = () => {
    if (!analysisResults?.unique_metrics) return null;

    const metrics = analysisResults.unique_metrics;
    
    return (
      <Card className="mb-4">
        <Card.Header>
          <h5><FaChartLine className="me-2" />–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞</h5>
        </Card.Header>
        <Card.Body>
          <Row>
            <Col md={6}>
              <div className="metric-item mb-3">
                <label>–ü—É—à–∏—Å—Ç–æ—Å—Ç—å</label>
                <ProgressBar 
                  now={metrics.fluffiness * 100} 
                  label={`${Math.round(metrics.fluffiness * 100)}%`}
                  variant={metrics.fluffiness > 0.7 ? 'success' : metrics.fluffiness > 0.4 ? 'warning' : 'info'}
                />
                <small className="text-muted">
                  {metrics.fluffiness > 0.7 ? '–û—á–µ–Ω—å –ø—É—à–∏—Å—Ç—ã–π' : 
                   metrics.fluffiness > 0.4 ? '–£–º–µ—Ä–µ–Ω–Ω–æ –ø—É—à–∏—Å—Ç—ã–π' : '–ì–ª–∞–¥–∫–æ—à–µ—Ä—Å—Ç–Ω—ã–π'}
                </small>
              </div>
              
              <div className="metric-item mb-3">
                <label>–°–∏–º–º–µ—Ç—Ä–∏—è –º–æ—Ä–¥–æ—á–∫–∏</label>
                <ProgressBar 
                  now={metrics.symmetry * 100} 
                  label={`${Math.round(metrics.symmetry * 100)}%`}
                  variant={metrics.symmetry > 0.8 ? 'success' : 'warning'}
                />
                <small className="text-muted">
                  {metrics.symmetry > 0.8 ? '–û—á–µ–Ω—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è' : '–£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è'}
                </small>
              </div>
            </Col>
            
            <Col md={6}>
              <div className="metric-item mb-3">
                <label>–°–ª–æ–∂–Ω–æ—Å—Ç—å —É–∑–æ—Ä–∞</label>
                <div className="d-flex align-items-center">
                  <Badge bg={metrics.pattern_complexity > 20 ? 'success' : metrics.pattern_complexity > 10 ? 'warning' : 'secondary'}>
                    {Math.round(metrics.pattern_complexity)}
                  </Badge>
                  <span className="ms-2">
                    {metrics.pattern_complexity > 20 ? '–°–ª–æ–∂–Ω—ã–π —É–∑–æ—Ä' : 
                     metrics.pattern_complexity > 10 ? '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É–∑–æ—Ä' : '–ü—Ä–æ—Å—Ç–æ–π –æ–∫—Ä–∞—Å'}
                  </span>
                </div>
              </div>
              
              <div className="metric-item mb-3">
                <label>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–≤–µ—Ç–æ–≤</label>
                <div className="d-flex align-items-center">
                  <Badge bg={metrics.color_diversity > 3 ? 'success' : metrics.color_diversity > 2 ? 'warning' : 'secondary'}>
                    {metrics.color_diversity}
                  </Badge>
                  <span className="ms-2">
                    {metrics.color_diversity > 3 ? '–ú–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω—ã–π' : 
                     metrics.color_diversity > 2 ? '–î–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π' : '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π'}
                  </span>
                </div>
              </div>
              
              <div className="metric-item mb-3">
                <label>–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ç–µ–ª–∞</label>
                <div className="d-flex align-items-center">
                  <Badge bg="info">
                    {metrics.body_proportions.toFixed(2)}
                  </Badge>
                  <span className="ms-2">
                    {metrics.body_proportions > 1.5 ? '–í—ã—Ç—è–Ω—É—Ç–æ–µ' : 
                     metrics.body_proportions < 0.8 ? '–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ' : '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ'}
                  </span>
                </div>
              </div>
            </Col>
          </Row>
        </Card.Body>
      </Card>
    );
  };

  const renderSimilarPets = () => {
    console.log('üêæ Rendering similar pets. Count:', similarPets.length);
    console.log('üêæ Similar pets data:', similarPets);
    
    if (similarPets.length === 0) {
      return (
        <Card>
          <Card.Header>
            <h5><FaHeart className="me-2" />–ü–æ—Ö–æ–∂–∏–µ –ø–∏—Ç–æ–º—Ü—ã</h5>
          </Card.Header>
          <Card.Body>
            <p className="text-muted">–ü–æ—Ö–æ–∂–∏–µ –ø–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
          </Card.Body>
        </Card>
      );
    }

    return (
      <Card>
        <Card.Header>
          <h5><FaHeart className="me-2" />–ü–æ—Ö–æ–∂–∏–µ –ø–∏—Ç–æ–º—Ü—ã ({similarPets.length})</h5>
        </Card.Header>
        <Card.Body>
          <Row>
            {similarPets.map((pet, index) => (
              <Col md={6} lg={4} key={pet.id} className="mb-4">
                <Card className="h-100 pet-similarity-card">
                  <div className="position-relative">
                    <Card.Img 
                      variant="top" 
                      src={pet.image_url ? `http://localhost:8000/uploads/${pet.image_url}` : 'https://via.placeholder.com/300x200?text=–ù–µ—Ç+—Ñ–æ—Ç–æ'}
                      style={{ height: '200px', objectFit: 'cover' }}
                    />
                    <div className="similarity-overlay">
                      {pet.match_type === 'visual_similarity' ? (
                        <Badge bg="success" className="similarity-badge">
                          <FaEye className="me-1" />
                          {Math.round(pet.similarity * 100)}% –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                        </Badge>
                      ) : pet.match_type === 'breed_match' ? (
                        <Badge bg="primary" className="similarity-badge">
                          <FaPaw className="me-1" />
                          {Math.round(pet.similarity * 100)}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Ä–æ–¥—ã
                        </Badge>
                      ) : pet.match_type === 'color_match' ? (
                        <Badge bg="warning" className="similarity-badge">
                          <FaHeart className="me-1" />
                          {Math.round(pet.similarity * 100)}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                        </Badge>
                      ) : pet.match_type === 'type_match' ? (
                        <Badge bg="info" className="similarity-badge">
                          <FaPaw className="me-1" />
                          {Math.round(pet.similarity * 100)}% —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
                        </Badge>
                      ) : (
                        <Badge 
                          bg={pet.similarity >= 0.8 ? 'success' : pet.similarity >= 0.6 ? 'warning' : 'secondary'} 
                          className="similarity-badge"
                        >
                          <FaPaw className="me-1" />
                          {Math.round(pet.similarity * 100)}% —Å—Ö–æ–¥—Å—Ç–≤–æ
                        </Badge>
                      )}
                    </div>
                  </div>
                  
                  <Card.Body>
                    <Card.Title className="h6">{pet.title}</Card.Title>
                    <div className="pet-details">
                      <small className="text-muted">
                        {formatLabel(pet.animal_type)} ‚Ä¢ {formatLabel(pet.color)}
                        {pet.breed && pet.breed !== '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞' && (
                          <> ‚Ä¢ {pet.breed}</>
                        )}
                      </small>
                    </div>
                    
                    {pet.ai_analyzed && (
                      <div className="mt-2">
                        <Badge bg="secondary" size="sm">
                          <FaBrain className="me-1" />
                          AI-–∞–Ω–∞–ª–∏–∑
                        </Badge>
                        {pet.ai_confidence && (
                          <Badge bg={getConfidenceColor(pet.ai_confidence)} size="sm" className="ms-1">
                            {formatConfidence(pet.ai_confidence)}
                          </Badge>
                        )}
                      </div>
                    )}
                    
                    <div className="mt-2">
                      <small className="text-muted">
                        {new Date(pet.created_at).toLocaleDateString('ru-RU')}
                      </small>
                    </div>
                  </Card.Body>
                  
                  <Card.Footer>
                    <button 
                      className="btn btn-outline-primary btn-sm w-100"
                      onClick={() => handleShowDetails(pet)}
                    >
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                  </Card.Footer>
                </Card>
              </Col>
            ))}
          </Row>
        </Card.Body>
      </Card>
    );
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleShowDetails = (pet) => {
    setSelectedPetDetails(pet);
    setShowDetailsModal(true);
  };

  const handleCloseDetailsModal = () => {
    setShowDetailsModal(false);
    setSelectedPetDetails(null);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <>
      <NavbarComp />
      <div className="enhanced-analysis-container">
        <div className="analysis-header">
          <Container>
            <h1 className="analysis-title">
              <FaSearch className="me-3" />
              –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            </h1>
            <p className="analysis-description">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            </p>
          </Container>
        </div>

        <Container>
          <Row>
            <Col lg={4}>
              <Card className="upload-card mb-4">
                <Card.Header>
                  <h5>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h5>
                </Card.Header>
                <Card.Body>
                  <div 
                    className="upload-area"
                    onClick={() => document.getElementById('file-input').click()}
                  >
                    {preview ? (
                      <img src={preview} alt="Preview" className="image-preview" />
                    ) : (
                      <div className="upload-placeholder">
                        <FaCloudUploadAlt className="upload-icon" />
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</p>
                        <small>JPG, PNG –¥–æ 5MB</small>
                      </div>
                    )}
                    <input
                      id="file-input"
                      type="file"
                      accept="image/*"
                      onChange={handleFileSelect}
                      style={{ display: 'none' }}
                    />
                  </div>
                  
                  <div className="analysis-controls">
                    <button 
                      className="analyze-button" 
                      onClick={handleAnalyze} 
                      disabled={!selectedFile || loading}
                    >
                      {loading ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : '–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤'}
                    </button>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            
            <Col lg={8}>
              {error && (
                <Alert variant="danger" className="mb-4">
                  {error}
                </Alert>
              )}

              {loading && (
                <Card className="mb-4">
                  <Card.Body className="text-center">
                    <div className="spinner-border text-primary mb-3" />
                    <h5>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...</h5>
                    <p className="text-muted">
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏—â–µ–º –ø–æ—Ö–æ–∂–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    </p>
                  </Card.Body>
                </Card>
              )}

              {renderUniqueMetrics()}
              {renderSimilarPets()}
            </Col>
          </Row>
        </Container>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <Modal show={showDetailsModal} onHide={handleCloseDetailsModal} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>
            <FaHeart className="me-2 text-primary" />
            –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedPetDetails && (
            <Row>
              <Col md={6}>
                <div className="text-center mb-3">
                  <img 
                    src={selectedPetDetails.image_url ? `http://localhost:8000/uploads/${selectedPetDetails.image_url}` : 'https://via.placeholder.com/400x300?text=–ù–µ—Ç+—Ñ–æ—Ç–æ'}
                    alt={selectedPetDetails.title}
                    className="img-fluid rounded"
                    style={{ maxHeight: '300px', objectFit: 'cover' }}
                  />
                </div>
                
                {/* Badges —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è */}
                <div className="text-center mb-3">
                  {selectedPetDetails.match_type === 'visual_similarity' ? (
                    <Badge bg="success" className="p-2">
                      <FaEye className="me-1" />
                      {Math.round(selectedPetDetails.similarity * 100)}% –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                    </Badge>
                  ) : selectedPetDetails.match_type === 'breed_match' ? (
                    <Badge bg="primary" className="p-2">
                      <FaPaw className="me-1" />
                      {Math.round(selectedPetDetails.similarity * 100)}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Ä–æ–¥—ã
                    </Badge>
                  ) : selectedPetDetails.match_type === 'color_match' ? (
                    <Badge bg="warning" className="p-2">
                      <FaHeart className="me-1" />
                      {Math.round(selectedPetDetails.similarity * 100)}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                    </Badge>
                  ) : (
                    <Badge bg="info" className="p-2">
                      <FaPaw className="me-1" />
                      {Math.round(selectedPetDetails.similarity * 100)}% —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
                    </Badge>
                  )}
                </div>
              </Col>
              
              <Col md={6}>
                <h5 className="text-primary mb-3">{selectedPetDetails.title}</h5>
                
                <div className="mb-3">
                  <h6 className="text-muted mb-2">–û–ø–∏—Å–∞–Ω–∏–µ:</h6>
                  <p className="text-justify">
                    {selectedPetDetails.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </p>
                </div>

                <Row className="mb-3">
                  <Col xs={6}>
                    <h6 className="text-muted mb-1">–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:</h6>
                    <Badge bg="light" text="dark" className="p-2">
                      {formatLabel(selectedPetDetails.animal_type)}
                    </Badge>
                  </Col>
                  <Col xs={6}>
                    <h6 className="text-muted mb-1">–ü–æ—Ä–æ–¥–∞:</h6>
                    <Badge bg="light" text="dark" className="p-2">
                      {selectedPetDetails.breed || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Badge>
                  </Col>
                </Row>

                <Row className="mb-3">
                  <Col xs={6}>
                    <h6 className="text-muted mb-1">–¶–≤–µ—Ç:</h6>
                    <Badge bg="light" text="dark" className="p-2">
                      {formatLabel(selectedPetDetails.color)}
                    </Badge>
                  </Col>
                  <Col xs={6}>
                    <h6 className="text-muted mb-1">–°—Ç–∞—Ç—É—Å:</h6>
                    <Badge bg={selectedPetDetails.status === 'lost' ? 'danger' : 'success'} className="p-2">
                      {selectedPetDetails.status === 'lost' ? '–ü–æ—Ç–µ—Ä—è–Ω' : '–ù–∞–π–¥–µ–Ω'}
                    </Badge>
                  </Col>
                </Row>

                {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */}
                {selectedPetDetails.features && selectedPetDetails.features.length > 0 && (
                  <div className="mb-3">
                    <h6 className="text-muted mb-2">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h6>
                    <div>
                      {selectedPetDetails.features.map((feature, index) => (
                        <Badge key={index} bg="secondary" className="me-1 mb-1 p-2">
                          {formatLabel(feature)}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                <div className="mb-3">
                  <h6 className="text-muted mb-1">–î–∞—Ç–∞ –ø–æ—Ç–µ—Ä–∏:</h6>
                  <p className="mb-0">{formatDate(selectedPetDetails.lost_date)}</p>
                </div>

                {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {selectedPetDetails.contact && (
                  <div className="mb-3">
                    <h6 className="text-muted mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
                    {selectedPetDetails.contact.name && (
                      <p className="mb-1">
                        <strong>–ò–º—è:</strong> {selectedPetDetails.contact.name}
                      </p>
                    )}
                    {selectedPetDetails.contact.phone && (
                      <p className="mb-1">
                        <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> 
                        <a href={`tel:${selectedPetDetails.contact.phone}`} className="ms-2 text-decoration-none">
                          {selectedPetDetails.contact.phone}
                        </a>
                      </p>
                    )}
                    {selectedPetDetails.contact.email && (
                      <p className="mb-1">
                        <strong>Email:</strong> 
                        <a href={`mailto:${selectedPetDetails.contact.email}`} className="ms-2 text-decoration-none">
                          {selectedPetDetails.contact.email}
                        </a>
                      </p>
                    )}
                  </div>
                )}

                {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
                {selectedPetDetails.lost_location && (
                  <div className="mb-3">
                    <h6 className="text-muted mb-2">–ú–µ—Å—Ç–æ –ø–æ—Ç–µ—Ä–∏:</h6>
                    <p className="mb-0">
                      {selectedPetDetails.lost_location.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                    </p>
                    {selectedPetDetails.lost_location.latitude && selectedPetDetails.lost_location.longitude && (
                      <small className="text-muted">
                        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {selectedPetDetails.lost_location.latitude.toFixed(4)}, {selectedPetDetails.lost_location.longitude.toFixed(4)}
                      </small>
                    )}
                  </div>
                )}

                {/* –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è */}
                <div className="text-muted">
                  <small>
                    –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {formatDate(selectedPetDetails.created_at)}
                  </small>
                </div>
              </Col>
            </Row>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseDetailsModal}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          {selectedPetDetails?.contact?.phone && (
            <Button 
              variant="success" 
              href={`tel:${selectedPetDetails.contact.phone}`}
            >
              <FaPhone className="me-1" />
              –ü–æ–∑–≤–æ–Ω–∏—Ç—å
            </Button>
          )}
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default EnhancedPetAnalysis; 

