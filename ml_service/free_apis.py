#!/usr/bin/env python3
"""
üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ PetFinderVision

–í–∫–ª—é—á–∞–µ—Ç:
- Hugging Face Inference API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
- –õ–æ–∫–∞–ª—å–Ω—ã–µ YOLO –º–æ–¥–µ–ª–∏ (offline)
- –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
"""

import os
import io
import asyncio
import aiohttp
import requests
import logging
from typing import Dict, List, Optional, Any
from PIL import Image
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class HuggingFaceVisionAPI:
    """Hugging Face API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {"Authorization": f"Bearer {api_key}"}
        self.base_url = "https://api-inference.huggingface.co/models"
        
        # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
        self.models = {
            'classification': 'microsoft/resnet-50',
            'detection': 'facebook/detr-resnet-50',
            'animal_specific': 'google/vit-base-patch16-224-in21k'
        }
        
    async def analyze_image(self, image_data: bytes) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Hugging Face"""
        try:
            logger.info("Starting Hugging Face analysis...")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
            tasks = [
                self._classify_image(image_data),
                self._detect_objects(image_data)
            ]
            
            classification_result, detection_result = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if isinstance(classification_result, Exception):
                logger.warning(f"Classification failed: {classification_result}")
                classification_result = []
            
            if isinstance(detection_result, Exception):
                logger.warning(f"Detection failed: {detection_result}")
                detection_result = []
            
            return self._process_hf_results(classification_result, detection_result)
            
        except Exception as e:
            logger.error(f"Error calling Hugging Face API: {e}")
            return {}
    
    async def _classify_image(self, image_data: bytes) -> List[Dict]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        url = f"{self.base_url}/{self.models['classification']}"
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(url, headers=self.headers, data=image_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"Classification completed: {len(result)} results")
                        return result
                    else:
                        logger.warning(f"Classification API returned status {response.status}")
                        return []
        except Exception as e:
            logger.error(f"Classification request failed: {e}")
            return []
    
    async def _detect_objects(self, image_data: bytes) -> List[Dict]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
        url = f"{self.base_url}/{self.models['detection']}"
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(url, headers=self.headers, data=image_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"Object detection completed: {len(result)} objects")
                        return result
                    else:
                        logger.warning(f"Detection API returned status {response.status}")
                        return []
        except Exception as e:
            logger.error(f"Detection request failed: {e}")
            return []
    
    def _process_hf_results(self, classification: List[Dict], detection: List[Dict]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Hugging Face"""
        processed = {
            'animals_detected': [],
            'classifications': classification,
            'objects': detection,
            'confidence': 0.0,
            'source': 'huggingface'
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
        animal_keywords = [
            'dog', 'cat', 'bird', 'animal', 'pet', 'canine', 'feline',
            'puppy', 'kitten', 'retriever', 'shepherd', 'terrier',
            'siamese', 'persian', 'bulldog', 'labrador', 'beagle'
        ]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        for item in classification:
            if not isinstance(item, dict):
                continue
                
            label = item.get('label', '').lower()
            score = item.get('score', 0)
            
            if any(keyword in label for keyword in animal_keywords):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
                animal_type = self._determine_animal_type(label)
                
                processed['animals_detected'].append({
                    'type': animal_type,
                    'confidence': score,
                    'label': item.get('label', ''),
                    'breed_info': self._extract_breed_info(label)
                })
                processed['confidence'] = max(processed['confidence'], score)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
        for obj in detection:
            if not isinstance(obj, dict):
                continue
                
            label = obj.get('label', '').lower()
            score = obj.get('score', 0)
            
            if any(keyword in label for keyword in animal_keywords) and score > 0.3:
                animal_type = self._determine_animal_type(label)
                
                processed['animals_detected'].append({
                    'type': animal_type,
                    'confidence': score,
                    'label': obj.get('label', ''),
                    'bbox': obj.get('box', {}),
                    'source': 'detection'
                })
                processed['confidence'] = max(processed['confidence'], score)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        processed['animals_detected'] = self._deduplicate_animals(processed['animals_detected'])
        
        return processed
    
    def _determine_animal_type(self, label: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ –ª–µ–π–±–ª—É"""
        label = label.lower()
        
        dog_keywords = ['dog', 'canine', 'puppy', 'retriever', 'shepherd', 'terrier', 'bulldog', 'labrador', 'beagle', 'poodle']
        cat_keywords = ['cat', 'feline', 'kitten', 'siamese', 'persian', 'tabby']
        bird_keywords = ['bird', 'parrot', 'canary', 'eagle', 'sparrow']
        
        if any(keyword in label for keyword in dog_keywords):
            return 'dog'
        elif any(keyword in label for keyword in cat_keywords):
            return 'cat'
        elif any(keyword in label for keyword in bird_keywords):
            return 'bird'
        else:
            return 'unknown'
    
    def _extract_breed_info(self, label: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ –∏–∑ –ª–µ–π–±–ª–∞"""
        breed_indicators = [
            'retriever', 'shepherd', 'terrier', 'bulldog', 'labrador', 'beagle',
            'siamese', 'persian', 'maine', 'ragdoll', 'bengal'
        ]
        
        label_lower = label.lower()
        for breed in breed_indicators:
            if breed in label_lower:
                return breed.title()
        
        return None
    
    def _deduplicate_animals(self, animals: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        seen_types = {}
        result = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
        animals.sort(key=lambda x: x['confidence'], reverse=True)
        
        for animal in animals:
            animal_type = animal['type']
            if animal_type not in seen_types:
                seen_types[animal_type] = True
                result.append(animal)
        
        return result


class LocalYOLOAnalyzer:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ YOLO"""
    
    def __init__(self, model_size: str = 'n'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –º–æ–¥–µ–ª–∏
        model_size: 'n' (nano), 's' (small), 'm' (medium), 'l' (large), 'x' (extra-large)
        """
        self.model = None
        self.model_size = model_size
        self.animal_classes = {
            15: 'bird', 16: 'cat', 17: 'dog', 18: 'horse', 
            19: 'sheep', 20: 'cow', 21: 'elephant', 22: 'bear', 
            23: 'zebra', 24: 'giraffe'
        }
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self._initialize_model()
    
    def _initialize_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –º–æ–¥–µ–ª–∏"""
        try:
            from ultralytics import YOLO
            model_name = f'yolov8{self.model_size}.pt'
            
            logger.info(f"Loading YOLO model: {model_name}")
            self.model = YOLO(model_name)
            logger.info("YOLO model loaded successfully")
            
        except ImportError:
            logger.warning("ultralytics not installed. Install with: pip install ultralytics")
            self.model = None
        except Exception as e:
            logger.error(f"Error loading YOLO model: {e}")
            self.model = None
    
    def analyze_image(self, image: Image.Image) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é YOLO"""
        if self.model is None:
            logger.warning("YOLO model not available")
            return {'animals_detected': [], 'total_objects': 0, 'source': 'local_yolo_unavailable'}
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ numpy array
            img_array = np.array(image)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º inference
            results = self.model(img_array, verbose=False)
            
            animals_found = []
            total_detections = 0
            
            for result in results:
                boxes = result.boxes
                if boxes is not None:
                    total_detections = len(boxes)
                    
                    for box in boxes:
                        class_id = int(box.cls[0])
                        confidence = float(box.conf[0])
                        
                        if class_id in self.animal_classes and confidence > 0.5:
                            animals_found.append({
                                'type': self.animal_classes[class_id],
                                'confidence': confidence,
                                'bbox': box.xyxy[0].tolist(),
                                'class_id': class_id
                            })
            
            logger.info(f"YOLO analysis: {len(animals_found)} animals detected from {total_detections} total objects")
            
            return {
                'animals_detected': animals_found,
                'total_objects': total_detections,
                'source': 'local_yolo'
            }
            
        except Exception as e:
            logger.error(f"Error in YOLO analysis: {e}")
            return {'animals_detected': [], 'total_objects': 0, 'source': 'local_yolo_error'}


class FreeHybridAnalyzer:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ API"""
    
    def __init__(self, hf_api: Optional[HuggingFaceVisionAPI] = None, local_yolo: Optional[LocalYOLOAnalyzer] = None):
        self.hf_api = hf_api
        self.local_yolo = local_yolo
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        self.available_analyzers = []
        if hf_api:
            self.available_analyzers.append('huggingface')
        if local_yolo and local_yolo.model:
            self.available_analyzers.append('local_yolo')
        
        logger.info(f"Free hybrid analyzer initialized with: {', '.join(self.available_analyzers)}")
    
    async def comprehensive_analysis(self, image_data: bytes) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏"""
        try:
            results = {
                'analysis_sources': self.available_analyzers,
                'hf_result': {},
                'local_result': {},
                'combined_result': {},
                'processing_time': 0
            }
            
            import time
            start_time = time.time()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = []
            
            # Hugging Face –∞–Ω–∞–ª–∏–∑ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            if self.hf_api:
                tasks.append(self._run_hf_analysis(image_data))
            else:
                tasks.append(self._mock_async_result({}))
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–π YOLO –∞–Ω–∞–ª–∏–∑ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ)
            if self.local_yolo:
                tasks.append(self._run_local_analysis(image_data))
            else:
                tasks.append(self._mock_async_result({}))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            hf_result, local_result = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if isinstance(hf_result, Exception):
                logger.error(f"HuggingFace analysis failed: {hf_result}")
                hf_result = {}
            
            if isinstance(local_result, Exception):
                logger.error(f"Local analysis failed: {local_result}")
                local_result = {}
            
            results['hf_result'] = hf_result
            results['local_result'] = local_result
            results['processing_time'] = time.time() - start_time
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results['combined_result'] = self._combine_free_results(hf_result, local_result)
            
            logger.info(f"Free analysis completed in {results['processing_time']:.2f}s")
            return results
            
        except Exception as e:
            logger.error(f"Error in free comprehensive analysis: {e}")
            return {
                'analysis_sources': [],
                'error': str(e),
                'combined_result': {}
            }
    
    async def _run_hf_analysis(self, image_data: bytes) -> Dict:
        """–ó–∞–ø—É—Å–∫ HuggingFace –∞–Ω–∞–ª–∏–∑–∞"""
        return await self.hf_api.analyze_image(image_data)
    
    async def _run_local_analysis(self, image_data: bytes) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
        image = Image.open(io.BytesIO(image_data))
        return self.local_yolo.analyze_image(image)
    
    async def _mock_async_result(self, result: Dict) -> Dict:
        """–ú–æ–∫ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""
        return result
    
    def _combine_free_results(self, hf_result: Dict, local_result: Dict) -> Dict[str, Any]:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        combined = {
            'animal_type': 'unknown',
            'confidence': 0.0,
            'analysis_sources': self.available_analyzers,
            'hf_classifications': hf_result.get('classifications', []),
            'local_detections': local_result.get('animals_detected', []),
            'detailed_analysis': {
                'huggingface_animals': hf_result.get('animals_detected', []),
                'yolo_animals': local_result.get('animals_detected', []),
                'total_objects': local_result.get('total_objects', 0)
            },
            'source': 'unknown'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        hf_animals = hf_result.get('animals_detected', [])
        local_animals = local_result.get('animals_detected', [])
        
        hf_confidence = max([a['confidence'] for a in hf_animals], default=0)
        local_confidence = max([a['confidence'] for a in local_animals], default=0)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ª—É—á—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if hf_confidence > local_confidence and hf_animals:
            best_animal = max(hf_animals, key=lambda x: x['confidence'])
            combined['animal_type'] = best_animal['type']
            combined['confidence'] = best_animal['confidence']
            combined['source'] = 'huggingface'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'breed_info' in best_animal and best_animal['breed_info']:
                combined['breed'] = best_animal['breed_info']
                
        elif local_animals:
            best_animal = max(local_animals, key=lambda x: x['confidence'])
            combined['animal_type'] = best_animal['type']
            combined['confidence'] = best_animal['confidence']
            combined['source'] = 'local_yolo'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        combined['meta'] = {
            'hf_available': bool(hf_result),
            'yolo_available': bool(local_result),
            'total_sources': len([r for r in [hf_result, local_result] if r])
        }
        
        return combined


def create_free_analyzer() -> Optional[FreeHybridAnalyzer]:
    """–°–æ–∑–¥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    try:
        hf_api = None
        local_yolo = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HuggingFace API
        hf_key = os.getenv('HUGGINGFACE_API_KEY')
        if hf_key:
            try:
                hf_api = HuggingFaceVisionAPI(hf_key)
                logger.info("‚úÖ HuggingFace API initialized")
            except Exception as e:
                logger.warning(f"Failed to initialize HuggingFace API: {e}")
        else:
            logger.info("‚ÑπÔ∏è HuggingFace API key not found, skipping HF integration")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ YOLO
        yolo_enabled = os.getenv('USE_LOCAL_YOLO', 'true').lower() == 'true'
        if yolo_enabled:
            try:
                model_size = os.getenv('YOLO_MODEL_SIZE', 'n')
                local_yolo = LocalYOLOAnalyzer(model_size)
                if local_yolo.model:
                    logger.info("‚úÖ Local YOLO analyzer initialized")
                else:
                    logger.warning("‚ùå YOLO model not loaded")
                    local_yolo = None
            except Exception as e:
                logger.warning(f"Failed to initialize YOLO: {e}")
        else:
            logger.info("‚ÑπÔ∏è Local YOLO disabled in configuration")
        
        # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        if hf_api or local_yolo:
            analyzer = FreeHybridAnalyzer(hf_api, local_yolo)
            logger.info(f"üöÄ Free hybrid analyzer created with {len(analyzer.available_analyzers)} sources")
            return analyzer
        else:
            logger.error("‚ùå No analyzers available")
            return None
        
    except Exception as e:
        logger.error(f"Error creating free analyzer: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_free_apis():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API"""
    logger.info("üß™ Testing free APIs...")
    
    analyzer = create_free_analyzer()
    if not analyzer:
        logger.error("No analyzer available for testing")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
    test_image = Image.new('RGB', (224, 224), color='white')
    img_byte_arr = io.BytesIO()
    test_image.save(img_byte_arr, format='JPEG')
    img_bytes = img_byte_arr.getvalue()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    result = await analyzer.comprehensive_analysis(img_bytes)
    
    logger.info("Test completed:")
    logger.info(f"  Sources: {result.get('analysis_sources', [])}")
    logger.info(f"  Processing time: {result.get('processing_time', 0):.2f}s")
    logger.info(f"  Animal detected: {result['combined_result'].get('animal_type', 'none')}")
    logger.info(f"  Confidence: {result['combined_result'].get('confidence', 0):.2f}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_free_apis()) 